command /yayeet:
    trigger:
        give player iron sword with lore "&bFrost +3" 
        give player bow with lore "&eLightning +3"

command /yayeet2:
    trigger:
        give player iron chestplate with lore "&cFire: &616%%"
        give player iron boots with lore "&eLightning: &616%%"

command /yayeet3 <text>:
    trigger:
        if arg 1 is "Lightning":
            add "&e%arg 1% +5" to lore of player's tool

command /zomb:
    trigger:
        spawn zombie
        set chestplate of last spawned zombie to iron chestplate with lore "&bFrost: &630%%"
        set leggings of last spawned zombie to iron leggings with lore "&bFrost: &610%%"
        #set tool of last spawned zombie to iron sword with lore "&eLightning"

command /zomb2:
    trigger:
        spawn zombie
        set chestplate of last spawned zombie to diamond chestplate
        set leggings of last spawned zombie to diamond leggings
        set tool of last spawned zombie to iron sword with lore "&cFire"

command /wtf:
    trigger:
        kill player's target

options:
    armor_slots: chestplate,leggings,boots,helmet

function damagecalc(v: entity, t: text) :: number:
    if {_t} is not "none":
        if {_t} is "Frost":
            apply potion of slowness of tier 2 without any particles to {_v} for 2 seconds
            play sound "entity.player.hurt_freeze" with volume 2 at location of {_v} for all players
            draw 4 of cloud 1 block above location of {_v} with extra 0.2
            set {_tool} to "&bFrost"
        if {_t} is "Lightning":
            set {_tool} to "&eLightning"
        if {_t} is "Fire":
            set {_tool} to "&cFire"
            ignite {_v} for 2.5 seconds
            play sound "item.firecharge.use" with volume 1 at location of {_v} for all players
            draw 10 of flame 1 block above location of {_v} with extra 0.2
        if {_t} is "Tearic":
            set {_tool} to "&5Tearic"

    if {_tool} contains "&cFire":
        loop {@armor_slots}:
            set {_slot} to loop-value
            loop lore of {_slot}:
                if loop-value-2 contains "&cFire":
                    set {_gay::*} to split loop-value-2 at ": &6"
                    set {_gay::*} to split {_gay::2} at "%%"
                    set {_percent} to {_gay::1} parsed as number
                    set {_damagecalc} to {_percent}+{_damagecalc}
        return "0.%{_damagecalc}%" parsed as number
    if {_tool} contains "&eLightning":
        loop {@armor_slots}:
            set {_slot} to loop-value
            loop lore of {_slot}:
                if loop-value-2 contains "&eLightning":
                    set {_gay::*} to split loop-value-2 at ": &6"
                    set {_gay::*} to split {_gay::2} at "%%"
                    set {_percent} to {_gay::1} parsed as number
                    set {_damagecalc} to {_percent}+{_damagecalc}
        return "0.%{_damagecalc}%" parsed as number
    if {_tool} contains "&bFrost":
        loop {@armor_slots}:
            set {_slot} to loop-value
            loop lore of {_slot}:
                if loop-value-2 contains "&bFrost":
                    set {_gay::*} to split loop-value-2 at ": &6"
                    set {_gay::*} to split {_gay::2} at "%%"
                    set {_percent} to {_gay::1} parsed as number
                    set {_damagecalc} to {_percent}+{_damagecalc}
        return "0.%{_damagecalc}%" parsed as number
    if {_tool} contains "&5Tearic":
        loop {@armor_slots}:
            set {_slot} to loop-value
            loop lore of {_slot}:
                if loop-value-2 contains "&5Tearic":
                    set {_gay::*} to split loop-value-2 at ": &6"
                    set {_gay::*} to split {_gay::2} at "%%"
                    set {_percent} to {_gay::1} parsed as number
                    set {_damagecalc} to {_percent}+{_damagecalc}
        return "0.%{_damagecalc}%" parsed as number
    if {_damagecalc} is 100:
        return "1" parsed as number
    return "0.%{_damagecalc}%" parsed as number


function dodamage(a: entity, v: entity, d: number, t: text):
    set {_k} to damagecalc({_v},{_t})
    if {_t} is "Lightning":
        set {_la} to {_v}
        draw 20 of dust using dustOption(rgb(94, 57, 227), 1) 1 block above {_la}
        set {_healed.%{_la}%} to true
        set {_healed.%{_a}%} to true
        play sound "block.redstone_torch.burnout" with volume 2 at location of {_la} for all players
        loop 3 times:
            if {_la} is not {_a}:
                set {_nearest} to first element of all mobs in radius 6 of {_la}
                if {_nearest} is {_la}:
                    set {_nearest} to random element of all mobs in radius 6 of {_la}
                loop all mobs in radius 6 of {_la}:
                    if {_healed.%loop-mob%} is not set:
                        if distance between loop-mob and {_la} is less than distance between {_la} and {_nearest}:
                            set {_nearest} to loop-mob
                if {_healed.%{_nearest}%} is not set:
                    if {_la} is not {_a}:
                        loop all blocks between {_la} and {_nearest}:
                            wait 1 tick
                            draw 20 of dust using dustOption(rgb(94, 57, 227), 2) 1 block above loop-block
            set {_la} to {_nearest}
            if {_healed.%{_la}%} is not set:
                if {_la} is not {_a}:
                    draw 20 of dust using dustOption(rgb(94, 57, 227), 1) 1 block above {_la}
                    draw 20 of dust using dustOption(rgb(94, 57, 227), 1) 2 block above {_la}
                    damage {_la} by 0.5 hearts
                    set {_healed.%{_la}%} to true
                    play sound "block.redstone_torch.burnout" with volume 0.5 at location of {_la} for all players
    #broadcast "reduction: %{_k}%"
    if {_k} is set:
        #broadcast "base damage: %{_d}%"
        if {_k} is 1:
            stop
        set {_damage} to {_d}-({_d}*{_k})
        if {_damage} < 0.5:
            set {_damage} to 0.5
        #broadcast "damage: %{_damage}%"
        set {_b} to {_v}'s health
        #broadcast "victim health: %{_b}%"
        set {_hm} to {_b}-{_damage}
        #broadcast {_hm}
        wait 0.1 seconds
        #broadcast {_v}'s health - {_damage}
        set {_v}'s health to {_hm}
        make {_a} damage {_v} by 0.1
        stop
    #broadcast "base damage: %{_d}%"
    wait 1 tick
    #broadcast {_v}'s health - {_d}
    set {_v}'s health to {_v}'s health - {_d}
    make {_a} damage {_v} by 0.1
        

                

#Effect applier
on damage:
    loop lore of attacker's tool:
        set {_} to loop-value
        set {_gay::*} to split {_} at "+"
        #broadcast {_gay::*}
        loop {_gay::*}:
            #broadcast loop-value-2 
            if loop-value-2 is "&bFrost ":
                title_reward(attacker, "Isaac the Freezer")
                set {_} to {_gay::2}
                #broadcast {_gay::*}
                set {_} to {_gay::2} parsed as number
                #broadcast {_}
                dodamage(attacker, victim, {_}, "Frost")
            if loop-value-2 is "&cFire ":
                title_reward(attacker, "Flame Alchemist")
                set {_} to {_gay::2}
                #broadcast {_gay::*}
                set {_} to {_gay::2} parsed as number
                #broadcast {_}
                dodamage(attacker, victim, {_}, "Fire")
            if loop-value-2 is "&eLightning ":
                title_reward(attacker, "Godspeed Zoldyck")
                set {_} to {_gay::2}
                #broadcast {_gay::*}
                set {_} to {_gay::2} parsed as number
                #broadcast {_}
                dodamage(attacker, victim, {_}, "Lightning")